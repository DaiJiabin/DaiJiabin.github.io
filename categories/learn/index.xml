<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Learn - Category - Jiabin&#39;s Blog</title>
        <link>https://daijiabin.github.io/categories/learn/</link>
        <description>Learn - Category - Jiabin&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 15 Mar 2021 09:04:18 &#43;0100</lastBuildDate><atom:link href="https://daijiabin.github.io/categories/learn/" rel="self" type="application/rss+xml" /><item>
    <title>Algorithms Dynamic Programming</title>
    <link>https://daijiabin.github.io/algorithms-dynamic-programming/</link>
    <pubDate>Mon, 15 Mar 2021 09:04:18 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://daijiabin.github.io/algorithms-dynamic-programming/</guid>
    <description><![CDATA[Algorithms 03 when it&rsquo;s used   Maximum, Minimum
  judge, if Something&rsquo;s possible
  calculate the Amount of the Plans
  when it&rsquo;s NOT used   specific Plan instead of the Amount of Plans ( Plaindrome Partitioning )
  Input is a Set instead of a Sequence ( Longest Consecutive Sequence )
  4 Points   State
  Transform-Function
  Initialization ( Start )]]></description>
</item><item>
    <title>Algorithms Devide and Conquer</title>
    <link>https://daijiabin.github.io/algorithms-devide-and-conquer/</link>
    <pubDate>Mon, 08 Mar 2021 08:13:23 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://daijiabin.github.io/algorithms-devide-and-conquer/</guid>
    <description><![CDATA[Algorithms 02 Traverse vs. Divide &amp; Conquer   both Recursive
  Result in Parameter vs. Result in return Value
  Top-down vs. Bottom-up
  Basic Usage   Merge Sort / Quick Sort
  Almost 90% Binary Tree Problems
  Merge Sort &amp; Quick Sort   Merge Sort
  Quick Sort
  Exercises on LeetCode   LeetCode 104. Maximum Depth of Binary Tree]]></description>
</item><item>
    <title>Algorithms: Binary Search</title>
    <link>https://daijiabin.github.io/algorithms-binary-search/</link>
    <pubDate>Sun, 07 Mar 2021 08:57:20 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://daijiabin.github.io/algorithms-binary-search/</guid>
    <description><![CDATA[Algorithms 01 Highlight of BS  with the Judge-setence if we can transform a Problem from O(n) to O(n / 2)  4 Points   The Thought is to shrank Array nums into 2 Numbers -&gt; while-loop with start + 1 &lt; end
  update mid -&gt; mid = start + (end - start) / 2
  don&rsquo;t be lazy: 3 case -&gt; ==, &lt; , &gt;]]></description>
</item><item>
    <title>Unix Programming</title>
    <link>https://daijiabin.github.io/unix-programming/</link>
    <pubDate>Tue, 23 Feb 2021 21:04:35 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://daijiabin.github.io/unix-programming/</guid>
    <description><![CDATA[Unix Programming Bash  Shortcuts     Function Shortcuts Help     previous Command CTRL + p previous   next Command CTRL + n next   move forward CTRL + f move forward   move backward CTRL + b move backwoard   Del CTRL + d delete   Home CTRL + a move to the Begin   End CTRL + e move to the End    Directories in UNIX  / root Directory  /bin executable Programms, like Commands /boot Kernerl and Initialization Programms /dev Devices /etc Config and Startup Files /home User&rsquo;s main Directory /lib Library Files for System Programms /media media Devices like CD-ROM, USB Stick /mnt Temporate Mount-System /proc Memopry&rsquo;s Map /sbin Super User executable Programms /usr  /usr/bin executable Programms / Applications /usr/game      Some often-used Commands Link  ln -s &lt;Source&gt; &lt;Your_Link_Name&gt; create a soft Link.]]></description>
</item><item>
    <title>Operating System</title>
    <link>https://daijiabin.github.io/operating-system/</link>
    <pubDate>Mon, 22 Feb 2021 10:57:41 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://daijiabin.github.io/operating-system/</guid>
    <description><![CDATA[Operating System ]]></description>
</item><item>
    <title>Computer Networks</title>
    <link>https://daijiabin.github.io/computer-networks/</link>
    <pubDate>Mon, 22 Feb 2021 10:50:46 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://daijiabin.github.io/computer-networks/</guid>
    <description><![CDATA[Computer Networks   Foreword:
References:
 Videos: 2021王道计算机网络 on YouTube eBook: Google Drive Link here (Chinese)  Power Point: Google Drive Link here (Chinese)     Ch 01. System&rsquo;s Structure of Computer Networks   Definition:
A System that connects distributed and independent Computer Systems through Devices and Cables, therefore the Resources-Sharing and Information-Transportation are realized. It&rsquo;s a Combination of connected and independent Computers.
  Functions:]]></description>
</item><item>
    <title>Spring</title>
    <link>https://daijiabin.github.io/spring/</link>
    <pubDate>Fri, 19 Feb 2021 20:14:05 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://daijiabin.github.io/spring/</guid>
    <description><![CDATA[Spring Notes Day 01. Basic Concepts  Kernel Techs: IoC(Inversion of Control) and aop. Loose the Relationships between Modules.  IoC ( Inversion of Control )   Creation, Value-Given and Management belong to the Containers beyond Codes.
  Management:
Creation, Attributes-Given and Management of the Relationships of Objects.
  Inversion:
Transfer the Rights of Management, Creation of Objects to the Containers ( here: Spring ) beyond Codes.]]></description>
</item><item>
    <title>Java Learning</title>
    <link>https://daijiabin.github.io/java-learning/</link>
    <pubDate>Wed, 03 Feb 2021 19:14:56 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://daijiabin.github.io/java-learning/</guid>
    <description><![CDATA[Java Learning ( Data Structures, mostly ) &hellip; And the greatest reason I learn it, is that I LOVE COFFEE ☕ its DS are soooooooooooo smoooooooth.
01. Basic Usage in Java Way to write   A .java File can be compiled through javac into .class File. .java File is called Source Code, after Compling it can be deleted.
  In every .java File can multiple Class be written. In every Class can multiple Methods be written.]]></description>
</item><item>
    <title>LeetCode</title>
    <link>https://daijiabin.github.io/leetcode/</link>
    <pubDate>Mon, 25 Jan 2021 12:30:06 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://daijiabin.github.io/leetcode/</guid>
    <description><![CDATA[Go Through LeetCode Recursion / Binary Tree 112. Path Sum - simple recursion   Discription:
  Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.
  A leaf is a node with no children.
    Idea:
  What kind of traverse should we use?]]></description>
</item><item>
    <title>Algorithms -- Recursion</title>
    <link>https://daijiabin.github.io/algorithms/</link>
    <pubDate>Sun, 17 Jan 2021 16:51:37 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://daijiabin.github.io/algorithms/</guid>
    <description><![CDATA[Ideas Recursion   What important is, NEVER JUMP INTO RECURSION.
  Actually&hellip; If it&rsquo;s possible, you can jump into it&hellip; (Well&hellip; You can take a try:) )
  In a Word, what the Blog above says, is that you must make sure that you know the very Defination of your Recursion Function, and trust that it can finish its Work perfectly.
  1. Recursion in List   Figure out what does your Function proceedure with, what kind of value will it return.]]></description>
</item></channel>
</rss>
