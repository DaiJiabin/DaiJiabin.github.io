<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Algorithms - Tag - Jiabin&#39;s Blog</title>
        <link>https://daijiabin.github.io/tags/algorithms/</link>
        <description>Algorithms - Tag - Jiabin&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 07 Mar 2021 08:57:20 &#43;0100</lastBuildDate><atom:link href="https://daijiabin.github.io/tags/algorithms/" rel="self" type="application/rss+xml" /><item>
    <title>Algorithms: Binary Search</title>
    <link>https://daijiabin.github.io/algorithms-binary-search/</link>
    <pubDate>Sun, 07 Mar 2021 08:57:20 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://daijiabin.github.io/algorithms-binary-search/</guid>
    <description><![CDATA[Algorithms: Binary Search Highlight of BS  with the Judge-setence if we can transform a Problem from O(n) to O(n / 2)  find any / first / last Position of the searching-Element  The Thought is to shrank Array nums into 2 Numbers.  Find the First Position   end to mid, if possible, return start
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  class Solution{ public int BinarySearch(int[] nums, int target){ if(nums == null || nums.]]></description>
</item><item>
    <title>Algorithms: DP</title>
    <link>https://daijiabin.github.io/algorithm-dp/</link>
    <pubDate>Sun, 07 Mar 2021 08:35:40 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://daijiabin.github.io/algorithm-dp/</guid>
    <description><![CDATA[Algorithms: DP ]]></description>
</item><item>
    <title>Algorithms -- Recursion</title>
    <link>https://daijiabin.github.io/algorithms/</link>
    <pubDate>Sun, 17 Jan 2021 16:51:37 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://daijiabin.github.io/algorithms/</guid>
    <description><![CDATA[Ideas Recursion   What important is, NEVER JUMP INTO RECURSION.
  Actually&hellip; If it&rsquo;s possible, you can jump into it&hellip; (Well&hellip; You can take a try:) )
  In a Word, what the Blog above says, is that you must make sure that you know the very Defination of your Recursion Function, and trust that it can finish its Work perfectly.
  1. Recursion in List   Figure out what does your Function proceedure with, what kind of value will it return.]]></description>
</item></channel>
</rss>
